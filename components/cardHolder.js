import React, {useRef, useState} from 'react'
import TinderCard from 'react-tinder-card'
import styles from '../styles/Home.module.css';
import {useDeviceSize} from "../lib/deviceSize";
import {useTelegramWeb} from "../lib/telegramWeb";

const db = [
  {
    name: '–ö–æ—Å—Ç—è',
    url: 'https://ven-shupo.github.io/secure-frontend/masik.jpeg',
    rate: '–ú–∞—Å–∏–∫',
    age: 30,
    description: '–î–µ—Ç–∫–∞, –µ—Å–ª–∏ —Ç—ã –º–Ω–µ –Ω–µ –Ω–∞–ø–∏—à–µ—à—å - <b>bold</b>, <strong>bold</strong> \x2a\x2a–º–Ω–µ\x2a\x2a \~\~–Ω–∞–ø–∏—à–µ—Ç\~\~ \|\|—Ç–∞ —Å—É–∫–∞\|\|' +
    '\n\n‚¨áÔ∏è –û—Ü–µ–Ω–∫–∏ –±—ã–≤—à–∏—Ö ‚¨áÔ∏è\n' +
    'üì∑ | –†–µ–∞–ª—å–Ω–æ–µ\n' + 
    'ü´Ç | –°–∏–≥–º–∞   \n' +
    'üí∞ | –≠–ª–∏—Ç    \n' +
    '#Ô∏è‚É£ | –ì–∏–≥–∞—á–∞–¥, –ö–∞—á–æ–∫' 
  },
  {
    name: '–î–∏–º–∞',
    url: 'https://ven-shupo.github.io/secure-frontend/chechik.jpg',
    rate: '–ß–µ—á–∏–∫',
    age: 25,
    description: '%2A–ú–æ—è –±—ã–≤—à–∞—è —Å–∫–∞–∑–∞–ª–∞%2A, 2A—á—Ç–æ2A —è %7C%0A–Ω–µ –Ω–∞–π–¥—É%7C%0A –Ω–∏–∫–æ–≥–æ –ª—É—á—à–µ –Ω–µ–µ, –Ω–æ –∫–∞–∂–µ—Ç—Å—è —è —É–∂–µ –Ω–∞—à–µ–ª' +
    '\n\n‚¨áÔ∏è –û—Ü–µ–Ω–∫–∏ –±—ã–≤—à–∏—Ö ‚¨áÔ∏è\n' +
    'üì∑ | –†–µ–∞–ª—å–Ω–æ–µ \n' + 
    'ü´Ç | –ë–µ—Ç–∞     \n' +
    'üí∞ | –ö–æ–º—Ñ–æ—Ä—Ç  \n' +
    '#Ô∏è‚É£ | –ê–Ω–∏–º–µ—à–Ω–∏–∫' 
  },
  {
    name: '–°–∞—à–∞',
    url: 'https://ven-shupo.github.io/secure-frontend/tubik.jpg',
    rate: '–¢—é–±–∏–∫',
    age: 21,
    description: '```–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –°–∞—à–∞, –º–Ω–µ 21```' +
    '\n\n‚¨áÔ∏è –û—Ü–µ–Ω–∫–∏ –±—ã–≤—à–∏—Ö ‚¨áÔ∏è\n' +
    'üì∑ | –§–µ–π–∫    \n' + 
    'ü´Ç | –û–º–µ–≥–∞   \n' +
    'üí∞ | –≠–∫–æ–Ω–æ–º  \n' +
    '#Ô∏è‚É£ | –ë–æ—Ç–∞–Ω, –°–∫—É—Ñ' 
  },
]

function CardHolder () {
  const characters = db;
  const tg = useTelegramWeb();
  const [width, height] = useDeviceSize();
  const [currentIndex, setCurrentIndex] = useState(db.length - 1);
  const currentIndexRef = useRef(currentIndex);
  const [lastDirection, setLastDirection] = useState();
  const updateCurrentIndex = (val) => {
    setCurrentIndex(val)
    currentIndexRef.current = val
  }
  const swiped = (direction, nameToDelete, index) => {
    setLastDirection(direction)
    updateCurrentIndex(index - 1)
  }
  tg.expand();
  tg.MainButton.setParams({text: '–û–ø–∏—Å–∞–Ω–∏–µ', is_visible: true}).onClick(() => {
    tg.showPopup({
      title: characters[currentIndexRef.current].name,
      message: characters[currentIndexRef.current].description,
      buttons: [
        {type: 'cancel'},
      ]
    })
  });
  return (
    <div>
      <div
        className={styles.cardContainer}
        style={{backgroundColor: 'var(--tg-theme-bg-color)'}}
      >
        {characters.map((character, index) =>
          <div>
            <TinderCard
              className={styles.swipe}
              key={character.name}
              onSwipe={(dir) => swiped(dir, character.name, index)}
              swipeRequirementType='position'
              swipeThreshold={width / 2}
            >
              <div
                className={styles.card}
                style={{ backgroundImage: 'url(' + character.url + ')' }}
              >
                <h3>{character.name}, {character.age}</h3>
                <rate>{character.rate}</rate>
              </div>
            </TinderCard>
          </div>
        )}
        {lastDirection &&
          <h1
            className={styles.infoText}
            style={{color: 'var(--tg-theme-text-color)'}}
          >You swiped {lastDirection}</h1>}
      </div>
    </div>
  )
}

export default CardHolder
